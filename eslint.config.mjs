// @ts-check

import eslint from '@eslint/js';
import * as eslintImport from 'eslint-plugin-import';
import eslintSecurity from 'eslint-plugin-security';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  eslint.configs.recommended,
  ...tseslint.configs.recommended,
  {
    plugins: {
      tseslint: tseslint.plugin,
      import: eslintImport,
      security: eslintSecurity,
    },
    settings: {
      'import/resolver': {
        typescript: {},
      },
    },
    rules: {
      '@typescript-eslint/no-explicit-any': 'off',
      'tseslint/no-non-null-assertion': 'off',
      'tseslint/no-explicit-any': 'off',
      'tseslint/no-unsafe-function-type': 'off',
      'tseslint/interface-name-prefix': 'off',
      'tseslint/explicit-function-return-type': 'warn',
      'tseslint/explicit-module-boundary-types': 'warn',
      'tseslint/no-unused-vars': ['error', { args: 'none' }],
      'tseslint/typedef': [
        'warn',
        {
          arrayDestructuring: true,
          arrowParameter: true,
          memberVariableDeclaration: true,
          parameter: true,
          propertyDeclaration: true,
          objectDestructuring: false,
          variableDeclaration: true,
        },
      ],
      'tseslint/no-inferrable-types': 0,
      'comma-dangle': ['error', 'always-multiline'],
      'quote-props': ['error', 'consistent-as-needed'],
      radix: 'error',
      'some-rule': 'off',
      'space-before-function-paren': ['error', { anonymous: 'never', asyncArrow: 'always', named: 'never' }],
      'use-isnan': 'error',
      'valid-typeof': 'warn',
      quotes: ['error', 'single', { avoidEscape: true }],
      'class-methods-use-this': 'off',
      'no-useless-constructor': 'off',
      'no-empty-function': 'off',
      'newline-before-return': 'error',
      'max-len': ['error', 160],
      'eol-last': ['error', 'always'],
      'max-classes-per-file': 'off',
      'new-parens': 'error',
      'no-bitwise': 'error',
      'no-caller': 'error',
      'no-cond-assign': 'error',
      'no-console': 'error',
      'no-debugger': 'error',
      'no-empty': 'error',
      'no-empty-functions': 'off',
      'no-fallthrough': 'off',
      'no-invalid-this': 'off',
      'no-multiple-empty-lines': ['error', { max: 1 }],
      'no-new-wrappers': 'error',
      'no-return-await': 'error',
      'no-throw-literal': 'error',
      'no-undef-init': 'off',
      'no-unsafe-finally': 'error',
      'no-unused-labels': 'error',
      'no-var': 'error',
      'object-shorthand': 'error',
      'one-var': 'off',
      'prefer-const': 'error',
      'spaced-comment': ['error', 'always'],
      'import/no-unresolved': ['error', { commonjs: true, amd: true }],
      'import/named': 'error',
      'import/default': 'error',
      'import/namespace': 'error',
      'import/export': 'error',
      'import/no-dynamic-require': 'error',
      'import/no-named-as-default': 'off',
      'import/prefer-default-export': 'off',
      'import/order': [
        'error',
        {
          groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index', 'object', 'type'],
          'newlines-between': 'always',
          alphabetize: {
            order: 'asc',
            caseInsensitive: true,
          },
        },
      ],
      'import/newline-after-import': ['error', { count: 1 }],
      'linebreak-style': 'off',
      'prettier/prettier': 'off',
      camelcase: 'off',
      'no-shadow': 'off',
      'no-restricted-syntax': 'off',
      'no-param-reassign': 'off',
      'security/detect-object-injection': 'off',
      'consistent-return': 'off',
    },
  },
  {
    ignores: ['eslint.config.mjs', '*/migration/*.ts', 'dist/**/*.js'],
  }
);
